{"version":3,"sources":["context/StocksContext.tsx","components/Error.tsx","components/ConnectionStatus.tsx","components/StockRow.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["StockStatus","initialState","hasOpened","hasError","data","StockDataContext","createContext","state","dispatch","reducer","action","type","payload","updatedData","forEach","stock","name","price","hasOwnProperty","Number","status","DOWN","UP","updatedAt","Date","NEUTRAL","currentStatus","StocksProvider","props","useReducer","Provider","value","useStocks","context","useContext","undefined","Error","className","ConnectionStatus","TD","children","statusBg","statusText","TableRow","key","ReactTimeAgo","date","Table","useMemo","Object","keys","length","map","stock_name","index","StockRow","App","socket","useRef","WebSocket","useEffect","current","onopen","onclose","onerror","error","console","log","onmessage","msg","JSON","parse","close","JavascriptTimeAgo","addLocale","en","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1052af1c.chunk.js","sourcesContent":["import React, {\n  createContext,\n  Dispatch,\n  PropsWithChildren,\n  useContext,\n  useReducer,\n} from \"react\";\n\nexport enum StockStatus {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  NEUTRAL = \"NEUTRAL\",\n}\n\ntype ArrayOfString = [string, string];\n\nexport type StockItem = {\n  price: number;\n  status: StockStatus;\n  updatedAt: Date;\n};\n\ntype State = {\n  hasOpened: boolean;\n  hasError: boolean;\n  data: Record<string, StockItem>;\n};\n\nexport interface Context {\n  state: State;\n  dispatch: Dispatch<Action>;\n}\n\ntype Action =\n  | { type: \"DATA\"; payload: ArrayOfString[] }\n  | { type: \"ERROR\" }\n  | { type: \"TOGGLE_CONN_STATUS\" };\n\nconst initialState = {\n  hasOpened: false,\n  hasError: false,\n  data: {},\n};\n\nexport const StockDataContext = createContext<Context>({\n  state: initialState,\n  dispatch: () => {},\n});\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"DATA\":\n      const { payload } = action;\n      const { data } = state;\n\n      const updatedData = data;\n      payload.forEach((stock) => {\n        const [name, price] = stock;\n        if (data.hasOwnProperty(name)) {\n          updatedData[name].price > Number(price)\n            ? (updatedData[name].status = StockStatus.DOWN)\n            : (updatedData[name].status = StockStatus.UP);\n\n          updatedData[name].price = Number(price);\n          updatedData[name].updatedAt = new Date();\n        } else {\n          updatedData[name] = {\n            price: Number(price),\n            status: StockStatus.NEUTRAL,\n            updatedAt: new Date(),\n          };\n        }\n      });\n\n      return { ...state, data: { ...data, ...updatedData } };\n    case \"ERROR\":\n      return { ...state, hasError: true };\n    case \"TOGGLE_CONN_STATUS\":\n      const { hasOpened: currentStatus } = state;\n      return { ...state, hasOpened: !currentStatus };\n    default:\n      return state;\n  }\n};\n\nconst StocksProvider = (props: PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return <StockDataContext.Provider value={{ state, dispatch }} {...props} />;\n};\n\nfunction useStocks() {\n  const context = useContext(StockDataContext);\n  if (context === undefined) {\n    throw new Error(`useStocks must be used within a StocksProvider`);\n  }\n  return context;\n}\n\nexport { StocksProvider, useStocks };\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div className=\"p-5\">\n      <p className=\"flex flex-col justify-center items-center text-red-700 text-sm font-bold\">\n        Something Went Wrong!\n        <span className=\"text-red-500 text-xs font-light\">Check Console</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { Fragment } from \"react\";\n\ntype Props = {\n  status: boolean;\n};\n\nconst ConnectionStatus = ({ status }: Props) => {\n  return (\n    <Fragment>\n      <span className=\"text-black text-sm font-semibold\">\n        Connection Status:\n      </span>\n      <span\n        className={`inline-flex items-center px-4 py-2 rounded text-xs font-medium leading-4 ${\n          status ? \"bg-green-200 text-green-800\" : \"bg-red-200 text-green-800\"\n        }`}\n      >\n        {status ? \"Connected\" : \"Disconnected\"}\n      </span>\n    </Fragment>\n  );\n};\n\nexport default ConnectionStatus;\n","import { StockItem, StockStatus } from \"context/StocksContext\";\nimport React from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\n\ntype TDProps = React.PropsWithChildren<{\n  data?: string | number;\n  statusBg?: string;\n  statusText?: string;\n}>;\n\nconst TD = ({ children, data, statusBg, statusText }: TDProps) => (\n  <td\n    className={`px-6 py-4 whitespace-no-wrap border-b border-gray-200 border px-8 py-2 text-sm text-center ${statusBg} ${statusText}`}\n  >\n    {children || data}\n  </td>\n);\n\ntype Props = {\n  name: string;\n} & StockItem;\n\nconst TableRow = ({ name, price, status, updatedAt }: Props) => {\n  let statusBg = \"\";\n  let statusText = \"\";\n  if (status === StockStatus.UP) {\n    statusBg = \"bg-green-400\";\n    statusText = \"text-green-700\";\n  } else if (status === StockStatus.DOWN) {\n    statusBg = \"bg-red-400\";\n    statusText = \"text-red-700\";\n  }\n\n  return (\n    <tr key={name}>\n      <TD data={name} />\n      <TD data={price} statusText={statusText} />\n      <TD data={status} statusBg={statusBg} />\n      <TD>\n        <ReactTimeAgo date={updatedAt} />\n      </TD>\n    </tr>\n  );\n};\n\nexport default TableRow;\n","import { useStocks } from \"context/StocksContext\";\nimport React, { useMemo } from \"react\";\nimport ConnectionStatus from \"./ConnectionStatus\";\nimport StockRow from \"./StockRow\";\n\nconst Table = () => {\n  const { state } = useStocks();\n\n  const data = useMemo(() => state.data, [state]);\n\n  if (!Object.keys(data).length) {\n    return <div className=\"text-indigo-500\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"align-middle inline-block min-w-full shadow overflow-hidden sm:rounded-lg border-b border-gray-200\">\n      <div className=\"p-2 flex justify-between items-center\">\n        <ConnectionStatus status={state.hasOpened} />\n      </div>\n      <table className=\"shadow-lg bg-white min-w-full\">\n        <thead>\n          <tr>\n            <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-700 uppercase tracking-wider\">\n              Name\n            </th>\n            <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-700 uppercase tracking-wider\">\n              Value\n            </th>\n            <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-700 uppercase tracking-wider\">\n              History\n            </th>\n            <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-700 uppercase tracking-wider\">\n              Updated At\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white\">\n          {Object.keys(data).map((stock_name, index) => {\n            let { price, status, updatedAt } = data[stock_name];\n            return (\n              <StockRow\n                key={index}\n                name={stock_name}\n                price={price}\n                status={status}\n                updatedAt={updatedAt}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import Error from \"components/Error\";\nimport Table from \"components/Table\";\nimport { useStocks } from \"context/StocksContext\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./tailwind.generated.css\";\n\nconst App = () => {\n  const { state, dispatch } = useStocks();\n\n  const URL =\n    process.env.NODE_ENV === \"production\"\n      ? \"wss://stocks.mnet.website\"\n      : \"ws://stocks.mnet.website\";\n  const socket = useRef(new WebSocket(URL));\n\n  useEffect(() => {\n    socket.current.onopen = () => {\n      dispatch({\n        type: \"TOGGLE_CONN_STATUS\",\n      });\n    };\n\n    socket.current.onclose = () => {\n      dispatch({\n        type: \"TOGGLE_CONN_STATUS\",\n      });\n    };\n\n    socket.current.onerror = (error) => {\n      console.log(error);\n\n      dispatch({\n        type: \"ERROR\",\n      });\n    };\n\n    socket.current.onmessage = (msg) => {\n      dispatch({\n        type: \"DATA\",\n        payload: JSON.parse(msg.data),\n      });\n    };\n  });\n\n  useEffect(() => {\n    return function cleanup() {\n      return socket.current.close();\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"w-full h-screen bg-gray-100 flex overflow:hidden\">\n      <div className=\"m-auto\">{state.hasError ? <Error /> : <Table />}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { StocksProvider } from \"context/StocksContext\";\nimport JavascriptTimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nJavascriptTimeAgo.addLocale(en);\n\nReactDOM.render(\n  <React.StrictMode>\n    <StocksProvider>\n      <App />\n    </StocksProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}