{"version":3,"sources":["context/StocksContext.tsx","components/Error.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["initialState","hasOpened","hasError","data","StockDataContext","createContext","state","dispatch","reducer","action","type","payload","newData","forEach","newStock","name","price","currentPrice","parseFloat","indexOfExisting","length","findIndex","stock","prevPrice","status","updatedAt","Date","toString","push","currentStatus","StocksProvider","props","useReducer","Provider","value","useStocks","context","useContext","undefined","Error","className","Table","useMemo","columns","Header","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","cl","getCellProps","App","socket","useRef","WebSocket","useEffect","current","onopen","onclose","onerror","error","console","log","onmessage","msg","JSON","parse","close","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c914c20e.chunk.js","sourcesContent":["import React, {\n  createContext,\n  Dispatch,\n  PropsWithChildren,\n  useContext,\n  useReducer,\n} from \"react\";\n\ntype ArrayOfString = [string, string];\ntype StockItem = {\n  name: string;\n  price: number;\n  status: string;\n  updatedAt: string;\n};\n\ntype State = {\n  hasOpened: boolean;\n  hasError: boolean;\n  data: StockItem[];\n};\n\nexport interface Context {\n  state: State;\n  dispatch: Dispatch<Action>;\n}\n\ntype Action =\n  | { type: \"DATA\"; payload: ArrayOfString[] }\n  | { type: \"ERROR\" }\n  | { type: \"TOGGLE_CONN_STATUS\" };\n\nconst initialState = {\n  hasOpened: false,\n  hasError: false,\n  data: [],\n};\n\nexport const StockDataContext = createContext<Context>({\n  state: initialState,\n  dispatch: () => {},\n});\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"DATA\":\n      const { payload } = action;\n      const { data } = state;\n\n      let newData: StockItem[] = [];\n\n      payload.forEach((newStock) => {\n        const [name, price] = newStock;\n        const currentPrice = parseFloat(price);\n\n        let indexOfExisting = -1;\n\n        if (data.length) {\n          indexOfExisting = data.findIndex((stock) => stock.name === name);\n        }\n\n        if (indexOfExisting > -1) {\n          const { price: prevPrice } = data[indexOfExisting];\n\n          let status = \"NEUTRAL\";\n\n          if (prevPrice > currentPrice) {\n            status = \"UP\";\n          } else if (prevPrice < currentPrice) {\n            status = \"DOWN\";\n          }\n\n          data[indexOfExisting] = {\n            name,\n            price: currentPrice,\n            status,\n            updatedAt: new Date().toString(),\n          };\n        } else {\n          newData.push({\n            name,\n            price: currentPrice,\n            status: \"NEUTRAL\",\n            updatedAt: new Date().toString(),\n          });\n        }\n      });\n\n      return { ...state, data: [...data, ...newData] };\n    case \"ERROR\":\n      return { ...state, hasError: true };\n    case \"TOGGLE_CONN_STATUS\":\n      const { hasOpened: currentStatus } = state;\n      return { ...state, hasOpened: !currentStatus };\n    default:\n      return state;\n  }\n};\n\nconst StocksProvider = (props: PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return <StockDataContext.Provider value={{ state, dispatch }} {...props} />;\n};\n\nfunction useStocks() {\n  const context = useContext(StockDataContext);\n  if (context === undefined) {\n    throw new Error(`useStocks must be used within a StocksProvider`);\n  }\n  return context;\n}\n\nexport { StocksProvider, useStocks };\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div className=\"p-5\">\n      <p className=\"text-red-700 text-sm font-bold\">Something Went Wrong!</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import { useStocks } from \"context/StocksContext\";\nimport React, { useMemo } from \"react\";\nimport { useTable } from \"react-table\";\n\nconst Table = () => {\n  const { state } = useStocks();\n\n  const data = useMemo(() => {\n    return state.data;\n  }, [state]);\n\n  const columns = useMemo(() => {\n    return [\n      {\n        Header: \"name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"price\",\n        accessor: \"price\",\n      },\n      {\n        Header: \"status\",\n        accessor: \"status\",\n      },\n      {\n        Header: \"time\",\n        accessor: \"updatedAt\",\n      },\n    ];\n  }, []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    // @ts-ignore\n  } = useTable({ columns, data });\n\n  if (!data.length) {\n    return <div className=\"text-indigo-600\">Loading</div>;\n  }\n\n  return (\n    <div className=\"align-middle inline-block min-w-full shadow overflow-hidden sm:rounded-lg border-b border-gray-200\">\n      <table {...getTableProps()} className=\"shadow-lg bg-white min-w-full\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps()}\n                  className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-700 uppercase tracking-wider\"\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()} className=\"bg-white\">\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  let cl = \"\";\n                  if (cell.value === \"UP\") {\n                    cl = \"bg-green-400\";\n                  } else if (cell.value === \"DOWN\") {\n                    cl = \"bg-red-400\";\n                  }\n                  return (\n                    <td\n                      {...cell.getCellProps()}\n                      className={`px-6 py-4 whitespace-no-wrap border-b border-gray-200 border px-8 py-2 text-sm ${cl}`}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import Error from \"components/Error\";\nimport Table from \"components/Table\";\nimport { useStocks } from \"context/StocksContext\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"./tailwind.generated.css\";\n\nconst App = () => {\n  const { state, dispatch } = useStocks();\n\n  const socket = useRef(new WebSocket(\"ws://stocks.mnet.website\"));\n\n  useEffect(() => {\n    socket.current.onopen = () => {\n      dispatch({\n        type: \"TOGGLE_CONN_STATUS\",\n      });\n    };\n\n    socket.current.onclose = () => {\n      dispatch({\n        type: \"TOGGLE_CONN_STATUS\",\n      });\n    };\n\n    socket.current.onerror = (error) => {\n      console.log(error);\n\n      dispatch({\n        type: \"ERROR\",\n      });\n    };\n\n    socket.current.onmessage = (msg) => {\n      dispatch({\n        type: \"DATA\",\n        payload: JSON.parse(msg.data),\n      });\n    };\n  });\n\n  useEffect(() => {\n    return function cleanup() {\n      return socket.current.close();\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"w-full h-screen bg-gray-100 flex overflow:hidden\">\n      <div className=\"m-auto\">{state.hasError ? <Error /> : <Table />}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { StocksProvider } from \"context/StocksContext\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StocksProvider>\n      <App />\n    </StocksProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}